/** Generated by YAKINDU Statechart Tools code generator. */

import com.yakindu.core.IStatemachine;
import java.util.LinkedList;
import java.util.Queue;

public class Statechart implements IStatemachine {
	public enum State {
		MAIN_REGION_RR,
		MAIN_REGION_GR,
		MAIN_REGION_RV,
		MAIN_REGION_RG,
		MAIN_REGION_VR,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private Queue<Runnable> inEventQueue = new LinkedList<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public Statechart() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setStato(0l);
		
		isExecuting = false;
	}
	
	public void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		sx_Verde = false;
		sx_Giallo = false;
		sx_Rosso = false;
		dx_Verde = false;
		dx_Giallo = false;
		dx_Rosso = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_RR:
			main_region_RR_react(-1l);
			break;
		case MAIN_REGION_GR:
			main_region_GR_react(-1l);
			break;
		case MAIN_REGION_RV:
			main_region_RV_react(-1l);
			break;
		case MAIN_REGION_RG:
			main_region_RG_react(-1l);
			break;
		case MAIN_REGION_VR:
			main_region_VR_react(-1l);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((sx_Verde || sx_Giallo) || sx_Rosso) || dx_Verde) || dx_Giallo) || dx_Rosso));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_RR:
			return stateVector[0] == State.MAIN_REGION_RR;
		case MAIN_REGION_GR:
			return stateVector[0] == State.MAIN_REGION_GR;
		case MAIN_REGION_RV:
			return stateVector[0] == State.MAIN_REGION_RV;
		case MAIN_REGION_RG:
			return stateVector[0] == State.MAIN_REGION_RG;
		case MAIN_REGION_VR:
			return stateVector[0] == State.MAIN_REGION_VR;
		default:
			return false;
		}
	}
	
	
	private boolean sx_Verde;
	
	
	public void raiseSx_Verde() {
		inEventQueue.add(() -> {
			sx_Verde = true;
		});
		runCycle();
	}
	
	private boolean sx_Giallo;
	
	
	public void raiseSx_Giallo() {
		inEventQueue.add(() -> {
			sx_Giallo = true;
		});
		runCycle();
	}
	
	private boolean sx_Rosso;
	
	
	public void raiseSx_Rosso() {
		inEventQueue.add(() -> {
			sx_Rosso = true;
		});
		runCycle();
	}
	
	private boolean dx_Verde;
	
	
	public void raiseDx_Verde() {
		inEventQueue.add(() -> {
			dx_Verde = true;
		});
		runCycle();
	}
	
	private boolean dx_Giallo;
	
	
	public void raiseDx_Giallo() {
		inEventQueue.add(() -> {
			dx_Giallo = true;
		});
		runCycle();
	}
	
	private boolean dx_Rosso;
	
	
	public void raiseDx_Rosso() {
		inEventQueue.add(() -> {
			dx_Rosso = true;
		});
		runCycle();
	}
	
	private long stato;
	
	public long getStato() {
		return stato;
	}
	
	public void setStato(long value) {
		this.stato = value;
	}
	
	/* 'default' enter sequence for state RR */
	private void enterSequence_main_region_RR_default() {
		stateVector[0] = State.MAIN_REGION_RR;
	}
	
	/* 'default' enter sequence for state GR */
	private void enterSequence_main_region_GR_default() {
		stateVector[0] = State.MAIN_REGION_GR;
	}
	
	/* 'default' enter sequence for state RV */
	private void enterSequence_main_region_RV_default() {
		stateVector[0] = State.MAIN_REGION_RV;
	}
	
	/* 'default' enter sequence for state RG */
	private void enterSequence_main_region_RG_default() {
		stateVector[0] = State.MAIN_REGION_RG;
	}
	
	/* 'default' enter sequence for state VR */
	private void enterSequence_main_region_VR_default() {
		stateVector[0] = State.MAIN_REGION_VR;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state RR */
	private void exitSequence_main_region_RR() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state GR */
	private void exitSequence_main_region_GR() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state RV */
	private void exitSequence_main_region_RV() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state RG */
	private void exitSequence_main_region_RG() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state VR */
	private void exitSequence_main_region_VR() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_RR:
			exitSequence_main_region_RR();
			break;
		case MAIN_REGION_GR:
			exitSequence_main_region_GR();
			break;
		case MAIN_REGION_RV:
			exitSequence_main_region_RV();
			break;
		case MAIN_REGION_RG:
			exitSequence_main_region_RG();
			break;
		case MAIN_REGION_VR:
			exitSequence_main_region_VR();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_RR_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_RR_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (sx_Verde) {
				exitSequence_main_region_RR();
				enterSequence_main_region_VR_default();
				react(0l);
				
				transitioned_after = 0l;
			} else {
				if (dx_Verde) {
					exitSequence_main_region_RR();
					enterSequence_main_region_RV_default();
					react(0l);
					
					transitioned_after = 0l;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_GR_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (sx_Rosso) {
				exitSequence_main_region_GR();
				enterSequence_main_region_RR_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_RV_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (dx_Giallo) {
				exitSequence_main_region_RV();
				enterSequence_main_region_RG_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_RG_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (dx_Rosso) {
				exitSequence_main_region_RG();
				enterSequence_main_region_RR_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_VR_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0l) {
			if (sx_Giallo) {
				exitSequence_main_region_VR();
				enterSequence_main_region_GR_default();
				react(0l);
				
				transitioned_after = 0l;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	/* Can be used by the client code to trigger a run to completion step without raising an event. */
	public void triggerWithoutEvent() {
		runCycle();
	}
}
